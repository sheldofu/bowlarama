{"version":3,"sources":["../../scripts/scoreboard.js"],"names":["Game","players","i","console","log","totalFrames","forEach","player","takeFrame","score","rollBallRandom","finalScore","pins","rolls","addScore","remainingPins","Math","round","random","rollBall"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;IACqBA,I;AAEnB,gBAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAe,EAAf;AACC,SAAK,IAAIC,IAAE,CAAX,EAAcA,IAAID,OAAlB,EAA2BC,GAA3B,EAA+B;AAC9BC,cAAQC,GAAR,CAAYF,CAAZ;AACA,WAAKD,OAAL,CAAaC,CAAb,IAAkB,qBAAW,YAAYA,CAAvB,CAAlB;AACA;AACD,SAAKG,WAAL,GAAmB,EAAnB;AACD;;;;4BAEO;AAAA;;AACP,WAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAI,KAAKG,WAAzB,EAAsCH,GAAtC,EAA2C;AAC1C,aAAKD,OAAL,CAAaK,OAAb,CAAqB,UAACC,MAAD,EAAY;AAC/B,gBAAKC,SAAL,CAAeD,MAAf;AACA,SAFF;AAGA;;AAEA;AACA,WAAKN,OAAL,CAAaK,OAAb,CAAqB,UAACC,MAAD,EAAY;AAC7B,YAAIL,IAAI,EAAR;AACA;AACA,YAAIK,OAAOE,KAAP,CAAaP,CAAb,IAAkBK,OAAOE,KAAP,CAAaP,IAAE,CAAf,CAAlB,KAAwC,EAA5C,EAAgD;AAC9C,gBAAKQ,cAAL,CAAoBH,MAApB;AACD;AACD;AACA,YAAIA,OAAOE,KAAP,CAAaP,IAAE,CAAf,MAAsB,EAA1B,EAA8B;AAC5B,gBAAKQ,cAAL,CAAoBH,MAApB;AACD;AACDA,eAAOI,UAAP;AACH,OAXD;;AAaA,aAAO,KAAKV,OAAZ;AACD;;;8BAESM,M,EAAQK,I,EAAMC,K,EAAO;AAC7B,WAAK,IAAIX,IAAI,CAAb,EAAgBA,IAAIW,KAApB,EAA2BX,GAA3B,EAAgC;AAC9B,aAAKQ,cAAL,CAAoBH,MAApB,EAA4BK,IAA5B;AACD;AACF;;;6BAEQL,M,EAAQK,I,EAAM;AACrBL,aAAOO,QAAP,CAAgBF,IAAhB;AACD;;;mCAEcL,M,EAAQQ,a,EAAe;AACpC,UAAIH,OAAOI,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBH,aAA3B,CAAX;AACD,WAAKI,QAAL,CAAcZ,MAAd,EAAsBK,IAAtB;AACC,aAAOA,IAAP;AACD;;;8BAESL,M,EAAQ;;AAEhB,UAAIQ,gBAAgB,KAAK,KAAKL,cAAL,CAAoBH,MAApB,EAA4B,EAA5B,CAAzB;AACAJ,cAAQC,GAAR,CAAYW,aAAZ;AACA,UAAIA,kBAAkB,CAAtB,EAAyB;AACvBA,wBAAgB,EAAhB;AACD;AACD,WAAKL,cAAL,CAAoBH,MAApB,EAA4BQ,aAA5B;AACDZ,cAAQC,GAAR,CAAY,aAAZ,EAA2BG,MAA3B;AACA;;;;;;kBA5DkBP,I","file":"scoreboard.js","sourcesContent":["import Player from \"./player\";\r\n\r\n// scoreboard.js\r\nexport default class Game {\r\n  \r\n  constructor(players) {\r\n  \tthis.players = [];\r\n    for (let i=0; i < players; i++){\r\n    \tconsole.log(i);\r\n    \tthis.players[i] = new Player('Player ' + i); \r\n    }\r\n    this.totalFrames = 10; \r\n  }\r\n\r\n  start() {\r\n  \tfor (var i = 0; i < this.totalFrames; i++) { \t\r\n\t  \tthis.players.forEach((player) => {\r\n  \t\t \tthis.takeFrame(player);\t\r\n\t    });\r\n\t  }\r\n\r\n    //last frame\r\n    this.players.forEach((player) => {\r\n        let i = 20;\r\n        //if players penultimate score is 10, roll ball twice\r\n        if (player.score[i] + player.score[i-1] === 10) {\r\n          this.rollBallRandom(player);        \r\n        }\r\n        //if players last frame adds up to 10, roll ball again\r\n        if (player.score[i-1] === 10) {\r\n          this.rollBallRandom(player);        \r\n        }\r\n        player.finalScore()\r\n    });\r\n\r\n    return this.players\r\n  }\r\n\r\n  rollBallX(player, pins, rolls) {\r\n    for (let i = 1; i < rolls; i++) {\r\n      this.rollBallRandom(player, pins);\r\n    }\r\n  }\r\n\r\n  rollBall(player, pins) {\r\n    player.addScore(pins);\r\n  }\r\n\r\n  rollBallRandom(player, remainingPins) {\r\n    var pins = Math.round(Math.random() * remainingPins);\r\n  \tthis.rollBall(player, pins);\r\n    return pins;\r\n  }\r\n\r\n  takeFrame(player) {\r\n\r\n    var remainingPins = 10 - this.rollBallRandom(player, 10);\r\n    console.log(remainingPins)\r\n    if (remainingPins === 0) {\r\n      remainingPins = 10;\r\n    }\r\n    this.rollBallRandom(player, remainingPins);\r\n  \tconsole.log('taking turn', player);\r\n  }\r\n\r\n}\r\n"]}