{"version":3,"sources":["../../scripts/scoreboard.js"],"names":["Game","players","currentPlayer","i","totalFrames","length","takeFrame","nextPlayer","lastFrame","forEach","player","cur","score","rollBallRandom","finalScore","pins","rolls","addScore","remainingPins","Math","round","random","rollBall"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;IACqBA,I;AAEnB,gBAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAe,EAAf;AACC,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAK,IAAIC,IAAE,CAAX,EAAcA,IAAIF,OAAlB,EAA2BE,GAA3B,EAA+B;AAC9B,WAAKF,OAAL,CAAaE,CAAb,IAAkB,qBAAW,YAAYA,CAAvB,CAAlB;AACA;AACD,SAAKC,WAAL,GAAmB,EAAnB;AACD;;;;4BAEO;AACP,WAAK,IAAID,IAAI,CAAb,EAAgBA,IAAI,KAAKC,WAAL,GAAmB,KAAKH,OAAL,CAAaI,MAApD,EAA4DF,GAA5D,EAAiE;AAC9D,aAAKG,SAAL;AACE,aAAKC,UAAL;AACJ;AACA,WAAKC,SAAL;AACA,aAAO,KAAKP,OAAZ;AACD;;;iCAEY;AACX,UAAI,KAAKC,aAAL,GAAqB,CAArB,KAA2B,KAAKD,OAAL,CAAaI,MAA5C,EAAoD;AAClD,aAAKH,aAAL,GAAqB,CAArB;AACD,OAFD,MAEO;AACL,aAAKA,aAAL,IAAsB,CAAtB;AACD;AACF;;;gCAEW;AAAA;;AACV;AACA,WAAKD,OAAL,CAAaQ,OAAb,CAAqB,UAACC,MAAD,EAASC,GAAT,EAAiB;AAClC,YAAIR,IAAIO,OAAOE,KAAP,CAAaP,MAAb,GAAsB,CAA9B;AACA,cAAKH,aAAL,GAAqBS,GAArB;AACA;AACA,YAAID,OAAOE,KAAP,CAAaT,CAAb,IAAkBO,OAAOE,KAAP,CAAaT,IAAE,CAAf,CAAlB,KAAwC,EAA5C,EAAgD;AAC9C,gBAAKU,cAAL,CAAoB,EAApB;AACD;AACD;AACA,YAAIH,OAAOE,KAAP,CAAaT,IAAE,CAAf,MAAsB,EAA1B,EAA8B;AAC5B,gBAAKU,cAAL,CAAoB,EAApB;AACD;AACDH,eAAOI,UAAP;AACH,OAZD;AAaD;;;8BAESC,I,EAAMC,K,EAAO;AACrB,WAAK,IAAIb,IAAI,CAAb,EAAgBA,IAAIa,KAApB,EAA2Bb,GAA3B,EAAgC;AAC9B,aAAKU,cAAL,CAAoBE,IAApB;AACD;AACF;;;6BAEQA,I,EAAM;AACb,WAAKd,OAAL,CAAa,KAAKC,aAAlB,EAAiCe,QAAjC,CAA0CF,IAA1C;AACD;;;mCAEcG,a,EAAe;AAC5B,UAAIH,OAAOI,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBH,aAA3B,CAAX;AACD,WAAKI,QAAL,CAAcP,IAAd;AACC,aAAOA,IAAP;AACD;;;gCAEW;AACV,UAAIG,gBAAgB,KAAK,KAAKL,cAAL,CAAoB,EAApB,CAAzB;AACA,UAAIK,kBAAkB,CAAtB,EAAyB;AACvBA,wBAAgB,EAAhB;AACD;AACD,WAAKL,cAAL,CAAoBK,aAApB;AACD;;;;;;kBAnEkBlB,I","file":"scoreboard.js","sourcesContent":["import Player from \"./player\";\r\n\r\n// scoreboard.js\r\nexport default class Game {\r\n  \r\n  constructor(players) {\r\n  \tthis.players = [];\r\n    this.currentPlayer = 0;\r\n    for (let i=0; i < players; i++){\r\n    \tthis.players[i] = new Player('Player ' + i); \r\n    }\r\n    this.totalFrames = 10; \r\n  }\r\n\r\n  start() {\r\n  \tfor (var i = 0; i < this.totalFrames * this.players.length; i++) { \t\r\n  \t\t \tthis.takeFrame();\r\n        this.nextPlayer();\r\n\t  }\r\n    this.lastFrame();\r\n    return this.players;\r\n  }\r\n\r\n  nextPlayer() {\r\n    if (this.currentPlayer + 1 === this.players.length) {\r\n      this.currentPlayer = 0;\r\n    } else {\r\n      this.currentPlayer += 1;\r\n    }\r\n  }\r\n\r\n  lastFrame() {\r\n    //last frame\r\n    this.players.forEach((player, cur) => {\r\n        let i = player.score.length - 1;\r\n        this.currentPlayer = cur;\r\n        //if players last frame adds up to 10, roll ball again\r\n        if (player.score[i] + player.score[i-1] === 10) {\r\n          this.rollBallRandom(10);\r\n        }\r\n        //if players penultimate score is 10, roll ball (will already have been rolled again)\r\n        if (player.score[i-1] === 10) {\r\n          this.rollBallRandom(10);\r\n        }\r\n        player.finalScore();\r\n    });\r\n  }\r\n\r\n  rollBallX(pins, rolls) {\r\n    for (let i = 0; i < rolls; i++) {\r\n      this.rollBallRandom(pins);\r\n    }\r\n  }\r\n\r\n  rollBall(pins) {\r\n    this.players[this.currentPlayer].addScore(pins);\r\n  }\r\n\r\n  rollBallRandom(remainingPins) {\r\n    var pins = Math.round(Math.random() * remainingPins);\r\n  \tthis.rollBall(pins);\r\n    return pins;\r\n  }\r\n\r\n  takeFrame() {\r\n    var remainingPins = 10 - this.rollBallRandom(10);\r\n    if (remainingPins === 0) {\r\n      remainingPins = 10;\r\n    }\r\n    this.rollBallRandom(remainingPins);\r\n  }\r\n\r\n}\r\n"]}